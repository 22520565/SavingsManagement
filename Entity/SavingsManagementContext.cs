// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Entity;

public partial class SavingsManagementContext : DbContext
{
    public SavingsManagementContext()
    {
    }

    public SavingsManagementContext(DbContextOptions<SavingsManagementContext> options)
        : base(options)
    {
    }

    public virtual DbSet<CashFlow> CashFlows { get; set; }

    public virtual DbSet<CustomerAccount> CustomerAccounts { get; set; }

    public virtual DbSet<Saving> Savings { get; set; }

    public virtual DbSet<SavingInterestRate> SavingInterestRates { get; set; }

    public virtual DbSet<StaffAccount> StaffAccounts { get; set; }

    public virtual DbSet<StaffAccountType> StaffAccountTypes { get; set; }

    public virtual DbSet<StaffPermission> StaffPermissions { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-COFIP2B;Initial Catalog=SavingsManagement;Integrated Security=True;Encrypt=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CashFlow>(entity =>
        {
            entity.ToTable(tb => tb.HasTrigger("UpdateCustomerBalance"));

            entity.Property(e => e.BalanceChanging).HasColumnType("money");
            entity.Property(e => e.BalanceRemaining).HasColumnType("money");
            entity.Property(e => e.Context)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Customer).WithMany(p => p.CashFlows)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CashFlows_CustomerAccounts");
        });

        modelBuilder.Entity<CustomerAccount>(entity =>
        {
            entity.HasIndex(e => e.Username, "UQ__Customer__F3DBC5729CE8DEF2").IsUnique();

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Balance).HasColumnType("money");
            entity.Property(e => e.CicNumber)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HashedPassword)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsMale).HasDefaultValue(true);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Saving>(entity =>
        {
            entity.ToTable(tb => tb.HasTrigger("DepositSavings_CashFlow"));

            entity.Property(e => e.AnnualInterestRate).HasColumnType("decimal(5, 3)");
            entity.Property(e => e.Balance).HasColumnType("money");

            entity.HasOne(d => d.Customer).WithMany(p => p.Savings)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Savings_CustomerAccounts");
        });

        modelBuilder.Entity<SavingInterestRate>(entity =>
        {
            entity.HasKey(e => e.PeriodInMonths).HasName("PK_AnnualInterestRates");

            entity.Property(e => e.AnnualInterestRate).HasColumnType("decimal(5, 3)");
        });

        modelBuilder.Entity<StaffAccount>(entity =>
        {
            entity.HasIndex(e => e.Username, "UQ__StaffAcc__F3DBC572752A95C1").IsUnique();

            entity.Property(e => e.HashedPassword)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Position)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.AccountType).WithMany(p => p.StaffAccounts)
                .HasForeignKey(d => d.AccountTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StaffAccounts_StaffAccountTypes");
        });

        modelBuilder.Entity<StaffAccountType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AccountTypes");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Permission).WithMany(p => p.StaffAccountTypes)
                .HasForeignKey(d => d.PermissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AccountTypes_Permissions");
        });

        modelBuilder.Entity<StaffPermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Permissions");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}